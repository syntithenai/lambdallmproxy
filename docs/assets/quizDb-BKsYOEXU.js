const h="quiz_statistics";const i="statistics";class x{db=null;initPromise=null;async init(){return this.initPromise?this.initPromise:(this.initPromise=new Promise((e,r)=>{if(!window.indexedDB){console.warn("IndexedDB not supported"),r(new Error("IndexedDB not supported"));return}const o=indexedDB.open(h,1);o.onerror=()=>{console.error("Failed to open quiz database:",o.error),r(o.error)},o.onsuccess=()=>{this.db=o.result,console.log("✅ Quiz database initialized"),e()},o.onupgradeneeded=c=>{const n=c.target.result;if(!n.objectStoreNames.contains(i)){const t=n.createObjectStore(i,{keyPath:"id"});t.createIndex("completedAt","completedAt",{unique:!1}),t.createIndex("score","score",{unique:!1}),t.createIndex("percentage","percentage",{unique:!1}),t.createIndex("synced","synced",{unique:!1}),console.log("✅ Quiz statistics store created")}}}),this.initPromise)}generateUUID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,e=>{const r=Math.random()*16|0;return(e==="x"?r:r&3|8).toString(16)})}async saveQuizStatistic(e){if(await this.init(),!this.db)throw new Error("Database not initialized");const r=this.generateUUID(),o=Math.round(e.score/e.totalQuestions*100),c={...e,id:r,synced:!1,percentage:o};return new Promise((n,t)=>{const a=this.db.transaction([i],"readwrite").objectStore(i).add(c);a.onsuccess=()=>{console.log("✅ Quiz statistic saved:",r),n(r)},a.onerror=()=>{console.error("Failed to save quiz statistic:",a.error),t(a.error)}})}async getQuizStatistics(e){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise((r,o)=>{const s=this.db.transaction([i],"readonly").objectStore(i).index("completedAt").openCursor(null,"prev"),l=[];s.onsuccess=()=>{const a=s.result;a&&(!e||l.length<e)?(l.push(a.value),a.continue()):r(l)},s.onerror=()=>{console.error("Failed to get quiz statistics:",s.error),o(s.error)}})}async getQuizStatistic(e){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise((r,o)=>{const t=this.db.transaction([i],"readonly").objectStore(i).get(e);t.onsuccess=()=>{r(t.result||null)},t.onerror=()=>{console.error("Failed to get quiz statistic:",t.error),o(t.error)}})}async deleteQuizStatistic(e){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise((r,o)=>{const t=this.db.transaction([i],"readwrite").objectStore(i).delete(e);t.onsuccess=()=>{console.log("✅ Quiz statistic deleted:",e),r()},t.onerror=()=>{console.error("Failed to delete quiz statistic:",t.error),o(t.error)}})}async markAsSynced(e){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise((r,o)=>{const n=this.db.transaction([i],"readwrite").objectStore(i);let t=0,s=!1;for(const l of e){const a=n.get(l);a.onsuccess=()=>{const u=a.result;if(u){u.synced=!0;const d=n.put(u);d.onsuccess=()=>{t++,t===e.length&&!s&&(console.log(`✅ Marked ${e.length} quiz statistics as synced`),r())},d.onerror=()=>{s||(s=!0,o(d.error))}}else t++,t===e.length&&!s&&r()},a.onerror=()=>{s||(s=!0,o(a.error))}}})}async getUnsyncedStatistics(){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise((e,r)=>{const t=this.db.transaction([i],"readonly").objectStore(i).index("synced").openCursor(IDBKeyRange.only(!1)),s=[];t.onsuccess=()=>{const l=t.result;l?(s.push(l.value),l.continue()):e(s)},t.onerror=()=>{console.error("Failed to get unsynced statistics:",t.error),r(t.error)}})}async getStatisticsSummary(){const e=await this.getQuizStatistics();if(e.length===0)return{totalQuizzes:0,averageScore:0,averagePercentage:0,highestScore:0,lowestScore:0,totalQuestionsAnswered:0,totalCorrectAnswers:0};const r=e.reduce((t,s)=>t+s.score,0),o=e.reduce((t,s)=>t+s.totalQuestions,0),c=e.reduce((t,s)=>t+s.score,0),n=e.map(t=>t.percentage);return{totalQuizzes:e.length,averageScore:r/e.length,averagePercentage:n.reduce((t,s)=>t+s,0)/e.length,highestScore:Math.max(...n),lowestScore:Math.min(...n),totalQuestionsAnswered:o,totalCorrectAnswers:c}}async clearAllStatistics(){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise((e,r)=>{const n=this.db.transaction([i],"readwrite").objectStore(i).clear();n.onsuccess=()=>{console.log("✅ All quiz statistics cleared"),e()},n.onerror=()=>{console.error("Failed to clear quiz statistics:",n.error),r(n.error)}})}}const w=new x;export{w as q};
