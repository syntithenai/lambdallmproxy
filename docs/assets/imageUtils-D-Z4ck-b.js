async function h(e,r=1200){try{if(e.startsWith("data:"))return e;const n=await fetch(e,{mode:"cors",credentials:"omit"});if(!n.ok)throw new Error(`Failed to fetch image: ${n.status}`);const t=await n.blob();return await d(t,r)}catch(n){return console.warn(`Failed to convert image to base64: ${e}`,n),e}}async function d(e,r=1200){return new Promise((n,t)=>{const c=new FileReader;c.onload=()=>{const o=new Image;o.onload=()=>{let s=o.width,a=o.height;(s>r||a>r)&&(s>a?(a=Math.round(a*r/s),s=r):(s=Math.round(s*r/a),a=r));const i=document.createElement("canvas");i.width=s,i.height=a;const l=i.getContext("2d");if(!l){t(new Error("Failed to get canvas context"));return}l.drawImage(o,0,0,s,a);const g=i.toDataURL("image/jpeg",.85);n(g)},o.onerror=()=>t(new Error("Failed to load image")),o.src=c.result},c.onerror=()=>t(new Error("Failed to read blob")),c.readAsDataURL(e)})}async function w(e,r=3,n=1200){const t=new Array(e.length);let c=0;const o=async()=>{if(c>=e.length)return;const a=c++,i=e[a];try{t[a]=await h(i,n)}catch(l){console.warn(`Failed to convert image ${a}:`,l),t[a]=i}await o()},s=Array.from({length:Math.min(r,e.length)},()=>o());return await Promise.all(s),t}function u(e){const r=[],n=/<img[^>]+src=["']([^"']+)["']/gi;let t;for(;(t=n.exec(e))!==null;)r.push(t[1]);return r}function m(e,r){let n=e;return r.forEach((t,c)=>{const o=c.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),s=new RegExp(`src=["']${o}["']`,"gi");n=n.replace(s,`src="${t}"`)}),n}async function f(e,r=3,n=1200){const t=u(e);if(t.length===0)return e;const c=await w(t,r,n),o=new Map;return t.forEach((s,a)=>{o.set(s,c[a])}),m(e,o)}export{d as blobToBase64WithResize,f as convertHtmlImagesToBase64,w as convertImagesToBase64,u as extractImageUrls,h as imageUrlToBase64,m as replaceImageUrlsWithBase64};
