function p(f){const d=[],l=f.split(`
`);let e={};for(const a of l)if(a.startsWith("event:"))e.event=a.substring(6).trim();else if(a.startsWith("data:"))e.data=a.substring(5).trim();else if(a===""&&e.event&&e.data){try{const r=JSON.parse(e.data);d.push({event:e.event,data:r})}catch(r){console.error("Failed to parse SSE data:",e.data,r)}e={}}return d}async function v(f,d,l,e){if(!f.body)throw new Error("Response body is null");const a=f.body.getReader(),r=new TextDecoder;let i="";try{for(;;){const{done:c,value:u}=await a.read();if(c){i.trim()&&p(i).forEach(s=>d(s.event,s.data)),l&&l();break}i+=r.decode(u,{stream:!0});const n=i.split(`

`);i=n.pop()||"";for(const t of n)t.trim()&&p(t+`

`).forEach(o=>d(o.event,o.data))}}catch(c){console.error("SSE stream error:",c),e&&e(c instanceof Error?c:new Error("Stream error"))}}async function m(f,d,l,e,a,r=3,i=1e3){const c={"Content-Type":"application/json",Authorization:`Bearer ${l}`,Accept:"text/event-stream"};a&&(c["X-YouTube-Token"]=a);let u=null;for(let n=0;n<r;n++)try{const t=await fetch(f,{method:"POST",headers:c,body:JSON.stringify(d),signal:e});if(!t.ok){if(t.status===429&&n<r-1){const s=t.headers.get("Retry-After");let o;if(s){const w=parseInt(s);if(!isNaN(w))o=w*1e3;else{const h=new Date(s);isNaN(h.getTime())?o=i*Math.pow(2,n):o=Math.max(0,h.getTime()-Date.now())}}else o=i*Math.pow(2,n);console.warn(`⚠️ Rate limited (429), retrying in ${(o/1e3).toFixed(1)}s... (attempt ${n+1}/${r})`),await new Promise(w=>setTimeout(w,o));continue}throw new Error(`Request failed: ${t.status} ${t.statusText}`)}return t}catch(t){if(u=t,e?.aborted)throw new Error("Request aborted by user");if(n>=r-1)break;const s=i*Math.pow(2,n);console.warn(`⚠️ Request failed, retrying in ${(s/1e3).toFixed(1)}s... (attempt ${n+1}/${r})`,t),await new Promise(o=>setTimeout(o,s))}throw u||new Error(`Request failed after ${r} attempts`)}export{m as createSSERequest,v as handleSSEResponse};
