/**
 * Cloud Sync Settings Component
 * 
 * Centralized cloud sync configuration for:
 * - Provider credentials (API keys)
 * - RAG embeddings/snippets
 * - Billing transaction data
 * - Application settings
 */

import { useState, useEffect } from 'react';
import { useSettings } from '../contexts/SettingsContext';
import { useAuth } from '../contexts/AuthContext';
import { hasSettingsInDrive } from '../utils/googleDocs';

export function CloudSyncSettings() {
  const { settings, setSettings, loadFromGoogleDrive, saveToGoogleDrive, clearSettings } = useSettings();
  const { user } = useAuth();
  
  const [showWarning, setShowWarning] = useState(false);
  const [isLoadingFromDrive, setIsLoadingFromDrive] = useState(false);
  const [hasSettingsInCloud, setHasSettingsInCloud] = useState(false);

  // Check for cloud settings on mount
  useEffect(() => {
    const checkCloudSettings = async () => {
      try {
        const exists = await hasSettingsInDrive();
        setHasSettingsInCloud(exists);
      } catch (err) {
        console.error('Failed to check for cloud settings:', err);
        setHasSettingsInCloud(false);
      }
    };
    checkCloudSettings();
  }, []);

  const handleToggleSyncToGoogleDrive = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const enabled = e.target.checked;
    
    if (enabled) {
      // Show security warning before enabling
      setShowWarning(true);
    } else {
      // Disable immediately
      setSettings({ ...settings, syncToGoogleDrive: false });
    }
  };

  const handleConfirmSync = async () => {
    setShowWarning(false);
    setSettings({ ...settings, syncToGoogleDrive: true });
    
    // Trigger initial save
    try {
      await saveToGoogleDrive();
    } catch (error) {
      console.error('Failed to save to Google Drive:', error);
    }
  };

  const handleLoadFromGoogleDrive = async () => {
    setIsLoadingFromDrive(true);
    try {
      await loadFromGoogleDrive();
    } finally {
      setIsLoadingFromDrive(false);
    }
  };

  const handleClearSettings = () => {
    if (window.confirm('‚ö†Ô∏è Are you sure you want to clear ALL settings? This will remove all configured providers, API keys, and cloud sync settings. This action cannot be undone.')) {
      clearSettings();
    }
  };

  const showLoadButton = hasSettingsInCloud;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">
          ‚òÅÔ∏è Cloud Sync Settings
        </h3>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          Enable cloud synchronization to backup and sync your data across devices using Google Drive and Sheets.
        </p>
      </div>

      {/* Google Sign-in Status */}
      {!user && (
        <div className="p-4 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-700">
          <div className="flex items-center gap-3">
            <span className="text-2xl">‚ö†Ô∏è</span>
            <div>
              <div className="font-medium text-amber-900 dark:text-amber-100">
                Sign in Required
              </div>
              <div className="text-sm text-amber-700 dark:text-amber-300 mt-1">
                You must sign in with Google to enable cloud sync features. Use the "Sign in with Google" button in the top-right corner.
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Provider Credentials Cloud Sync */}
      <div className="card p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700">
        <div className="flex items-start gap-3">
          <div className="flex-1">
            <label className="flex items-center gap-3 cursor-pointer">
              <input
                type="checkbox"
                checked={settings.syncToGoogleDrive || false}
                onChange={handleToggleSyncToGoogleDrive}
                disabled={!user}
                className="w-5 h-5 text-blue-600 rounded focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
              />
              <div>
                <div className="font-medium text-gray-900 dark:text-gray-100">
                  üîê Sync Provider Credentials & Configuration
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  Automatically backup your provider settings, API keys, and application configuration to Google Drive. Enables seamless setup on new devices.
                </div>
              </div>
            </label>
          </div>
          
          <div className="flex gap-2">
            {showLoadButton && (
              <button
                onClick={handleLoadFromGoogleDrive}
                disabled={isLoadingFromDrive || !user}
                className="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-sm disabled:opacity-50"
                title="Load settings from Google Drive"
              >
                {isLoadingFromDrive ? '‚è≥' : 'üì•'} Load
              </button>
            )}
            <button
              onClick={handleClearSettings}
              disabled={!user}
              className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 transition-colors text-sm disabled:opacity-50"
              title="Clear all settings"
            >
              üóëÔ∏è Clear
            </button>
          </div>
        </div>
        
        {settings.syncToGoogleDrive && (
          <div className="mt-3 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700/50 rounded text-sm text-green-700 dark:text-green-400">
            ‚úì Settings are automatically syncing to Google Drive folder: <span className="font-mono">Research Agent</span>
          </div>
        )}
      </div>

      {/* RAG/Snippets Cloud Sync Info */}
      <div className="card p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700">
        <div className="flex items-center gap-3">
          <span className="text-2xl">üìö</span>
          <div className="flex-1">
            <div className="font-medium text-gray-900 dark:text-gray-100">
              Swag & Snippets (RAG Embeddings) Sync
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Configure cloud sync for your knowledge base, bookmarks, todos, and code snippets in the <strong>RAG</strong> tab. This includes both basic sync and direct Google Sheets access for faster syncing.
            </div>
          </div>
        </div>
      </div>

      {/* Billing Data Cloud Sync */}
      <div className="card p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700">
        <div className="flex items-center gap-3">
          <div className="flex-1">
            <div className="font-medium text-gray-900 dark:text-gray-100">
              üí∞ Billing & Transaction History
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Your billing data is automatically logged to Google Sheets when cloud sync is enabled (requires Drive access token). View detailed cost breakdowns in the Billing page.
            </div>
          </div>
          <div className="text-sm text-gray-500 dark:text-gray-400">
            {localStorage.getItem('google_drive_access_token') ? '‚úÖ Active' : '‚ö†Ô∏è Not enabled'}
          </div>
        </div>
      </div>

      {/* Info Box */}
      <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
        <div className="text-sm text-blue-900 dark:text-blue-100">
          <div className="font-medium mb-2">üí° What Gets Synced?</div>
          <ul className="space-y-1 text-blue-700 dark:text-blue-300">
            <li>‚Ä¢ <strong>Provider Credentials:</strong> API keys, model configurations, optimization settings</li>
            <li>‚Ä¢ <strong>Swag & Snippets:</strong> Bookmarks, code snippets, todos, and RAG embeddings</li>
            <li>‚Ä¢ <strong>Billing Data:</strong> Transaction logs with cost breakdowns per model and provider</li>
            <li>‚Ä¢ <strong>Application Settings:</strong> Tool preferences, RAG configuration, and UI state</li>
          </ul>
        </div>
      </div>

      {/* Security Warning Dialog */}
      {showWarning && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 p-4">
          <div className="card max-w-md w-full p-6 bg-white dark:bg-gray-900 border-2 border-yellow-600">
            <div className="flex items-start gap-3 mb-4">
              <div className="text-3xl">‚ö†Ô∏è</div>
              <div>
                <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-2">Security Warning</h3>
                <p className="text-gray-700 dark:text-gray-300 mb-3">
                  You are about to save <strong className="text-yellow-600 dark:text-yellow-400">sensitive data</strong> (API keys and provider credentials) to a document in your Google Drive.
                </p>
                <ul className="space-y-2 text-sm text-gray-600 dark:text-gray-400 mb-4">
                  <li>‚úì File will be stored in folder: <span className="font-mono text-gray-900 dark:text-white">Research Agent</span></li>
                  <li>‚úì File name: <span className="font-mono text-gray-900 dark:text-white">Research Agent Settings</span></li>
                  <li>‚úì Only you have access (not shared publicly)</li>
                  <li>‚ö†Ô∏è Contains API keys in plain text</li>
                  <li>‚ö†Ô∏è Ensure your Google account is secure (2FA recommended)</li>
                </ul>
              </div>
            </div>
            
            <div className="flex gap-3">
              <button
                onClick={handleConfirmSync}
                className="flex-1 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors font-medium"
              >
                I Understand, Enable Sync
              </button>
              <button
                onClick={() => setShowWarning(false)}
                className="px-4 py-2 bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
